/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"



//==============================================================================
GuitarMidiAudioProcessor::GuitarMidiAudioProcessor()
    : m_playbackSpeed(0.75)
{
}

GuitarMidiAudioProcessor::~GuitarMidiAudioProcessor()
{
}

//==============================================================================
const String GuitarMidiAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int GuitarMidiAudioProcessor::getNumParameters()
{
    return 0;
}

float GuitarMidiAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void GuitarMidiAudioProcessor::setParameter (int index, float newValue)
{
}

const String GuitarMidiAudioProcessor::getParameterName (int index)
{
    return String();
}

const String GuitarMidiAudioProcessor::getParameterText (int index)
{
    return String();
}

const String GuitarMidiAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String GuitarMidiAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool GuitarMidiAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool GuitarMidiAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool GuitarMidiAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool GuitarMidiAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool GuitarMidiAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double GuitarMidiAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int GuitarMidiAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int GuitarMidiAudioProcessor::getCurrentProgram()
{
    return 0;
}

void GuitarMidiAudioProcessor::setCurrentProgram (int index)
{
}

const String GuitarMidiAudioProcessor::getProgramName (int index)
{
    return String();
}

void GuitarMidiAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void GuitarMidiAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void GuitarMidiAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void GuitarMidiAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);

        // ..do something to the data...
    }
}

//==============================================================================
bool GuitarMidiAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* GuitarMidiAudioProcessor::createEditor()
{
    return new GuitarMidiAudioProcessorEditor (*this);
}

//==============================================================================
void GuitarMidiAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void GuitarMidiAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}


//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new GuitarMidiAudioProcessor();
}


//==============================================================================

void GuitarMidiAudioProcessor::loadMidiFile(String fileLocation)
{
    //either add exmaplemidiFiles to your project or change this location
    File file(fileLocation);

    //TO DO: add some kind of check whether file exists!

    if (!file.isDirectory())
    {
        FileInputStream fileInput(file);


        m_midiFile.readFrom(fileInput);
        //num tracks returns an int
        std::cout << "num tracks " << m_midiFile.getNumTracks() << std::endl;

        int ppq = m_midiFile.getTimeFormat();
        std::cout << "time format " << ppq << std::endl;




        std::cout << "Last Timestamp " << m_midiFile.getLastTimestamp() << std::endl;

        int trackIndex = 0;

        if (trackIndex < m_midiFile.getNumTracks()){

            //midi message sequence is pointer to a midi track, as loaded from a file
            m_trackSequence = *m_midiFile.getTrack(trackIndex);//replaces empty holder with track 0

            std::cout << "track 0 has " << m_trackSequence.getNumEvents() << " events" << std::endl;

            MidiMessageSequence::MidiEventHolder* event;//pointer to an individual midi event

            for (int i = 0; i < m_trackSequence.getNumEvents(); i++){
                //can get this time info from the track sequence
                double eventTime = m_trackSequence.getEventTime(i);
                std::cout << "\nevent " << i << " is at time " << eventTime << std::endl;

                //or parse through the events themselves
                event = m_trackSequence.getEventPointer(i);

                double tmp = event->message.getTimeStamp();
                std::cout << "event " << i << " timestamp " << tmp << std::endl;

                const uint8* data = event->message.getRawData();

                std::cout << "size is " <<  event->message.getRawDataSize() << std::endl;

                if (event->message.isNoteOn())
                    std::cout << "note on" << std::endl;
                else if (event->message.isNoteOff())
                    std::cout << "note off" << std::endl;
                else
                    std::cout << "other " << std::endl;

                std::cout << "data [0] " << (int)data[0] << std::endl;
                std::cout << "data [1] " << (int)data[1] << std::endl;
                std::cout << "data [2] " << (int)data[2] << std::endl;

                if (data[0] == 255){
                    for (int i = 3; i < event->message.getRawDataSize(); i++){
                        std::cout << "character[" << i-3 << "] :'" << data[i] << "'" << std::endl;
                    }
                }

            }//end for

            m_trackSequence.updateMatchedPairs();

        }//end if

    }//end main if not dir
}

//==============================================================================

void GuitarMidiAudioProcessor::startMidiPlayback()
{
    m_millisCounter = 0;
    m_midiPlayIndex = -1;
    startTimer(1);
}


//==============================================================================

void GuitarMidiAudioProcessor::updateMidiPlayPosition()
{
    m_millisCounter++;

    updateMidiPlayPositionToMillis(m_millisCounter * m_playbackSpeed);
}


//==============================================================================

void GuitarMidiAudioProcessor::updateMidiPlayPositionToMillis(float millisPosition)
{

    int numEvents = m_trackSequence.getNumEvents();
    int useCount = (int)millisPosition;//(int)(m_millisCounter * playbackSpeed);//relative to 1ms = 1 tick

    MidiMessageSequence::MidiEventHolder* outputEvent;

    while (m_midiPlayIndex < numEvents && m_trackSequence.getEventTime(m_midiPlayIndex) < useCount){
        //we have caught up to where we are
        // index++;
        //std::cout << "play index " << m_midiPlayIndex << " at time " << m_trackSequence.getEventTime(m_midiPlayIndex) << std::endl;

        if (m_midiPlayIndex >= 0){

            outputEvent = m_trackSequence.getEventPointer(m_midiPlayIndex);

            if (outputEvent->message.isNoteOnOrOff()){
                m_midiOutputDevice->sendMessageNow(outputEvent->message);
                if (outputEvent->message.isNoteOn()){
                    int tmp = m_trackSequence.getIndexOfMatchingKeyUp(m_midiPlayIndex);
                    std::cout << "NOTE ON,  index " << m_midiPlayIndex << " has up key " << tmp << std::endl;
                } else {
                    std::cout << "NOTE Off, index " << m_midiPlayIndex << std::endl;
                }
            }
            else
                std::cout << "event " << m_midiPlayIndex << " is not note on/off" << std::endl;

        }

        m_midiPlayIndex++;

        int64 timenow = juce::Time::currentTimeMillis();
        std::cout << "timer callback " << timenow << std::endl;

    }

    outputEvent = NULL;
    delete outputEvent;
}

//==============================================================================

void GuitarMidiAudioProcessor::setMidiOutputDevice(MidiOutput* midiOutputDevice)
{
    m_midiOutputDevice = midiOutputDevice;
}

//==============================================================================
