/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"


//==============================================================================
/**
*/
class GuitarMidiAudioProcessor  : public AudioProcessor, private HighResolutionTimer
{

public:

    //==============================================================================
    GuitarMidiAudioProcessor();
    ~GuitarMidiAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;


    void loadMidiFile(String fileLocation);
    void startMidiPlayback();
    void setMidiOutputDevice(MidiOutput* midiOutputDevice);

private:
    //==============================================================================

    void updateMidiPlayPosition();
    void updateMidiPlayPositionToMillis(float millisPosition);


    //timer to play file - called every millisecond
    void hiResTimerCallback() override
    {
        updateMidiPlayPosition();
    }


    MidiMessageSequence m_trackSequence;//pointer to track we will play
    MidiMessageSequence::MidiEventHolder* m_playEvent;//pointer to an individual midi event

    int m_millisCounter;
    int m_midiPlayIndex;
    float m_playbackSpeed;

    MidiFile m_midiFile;

    ScopedPointer<MidiOutput> m_midiOutputDevice;


    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GuitarMidiAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
