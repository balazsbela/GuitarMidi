/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
GuitarMidiAudioProcessorEditor::GuitarMidiAudioProcessorEditor (GuitarMidiAudioProcessor& p)
    : AudioProcessorEditor (&p), m_processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (500, 400);


    addAndMakeVisible (m_midiOutputBox);
    m_midiOutputBox.setTextWhenNoChoicesAvailable ("No MIDI Output Enabled");

    const StringArray midiOutputs (MidiOutput::getDevices());
    m_midiOutputBox.addItemList (midiOutputs, 1);
    m_midiOutputBox.addListener (this);

    String location = "/home/balazsbela/midiScale.mid";
    m_processor.loadMidiFile(location);
}


GuitarMidiAudioProcessorEditor::~GuitarMidiAudioProcessorEditor()
{
}

//==============================================================================
void GuitarMidiAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colour (0xffeeddff));

    g.setFont (Font (16.0f));
    g.setColour (Colours::black);
    g.drawText ("choose a midi port and file will play", getLocalBounds(), Justification::centred, true);
}


void GuitarMidiAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    m_midiOutputBox.setBoundsRelative(0.1,0.05,0.7,0.05);
}


void GuitarMidiAudioProcessorEditor::comboBoxChanged(ComboBox* box)
{
    if (box == &m_midiOutputBox)
    {
        m_processor.setMidiOutputDevice(MidiOutput::openDevice(m_midiOutputBox.getSelectedItemIndex()));
        m_processor.startMidiPlayback();
    }
}

